# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# This .yml file is based on scikit-learn and statsmodels' Appveyor CI setups, adapted for
# use with Pyramid https://ci.appveyor.com/project/tgsmith61591/pyramid

environment:
  global:
    TWINE_PASSWORD:
      secure: Q5APq9OHpPjBNyllnTwNr2A2wj9DexncSe17/PW9+/U=
    TWINE_USERNAME: tgsmith61591.gh
    # TWINE_REPOSITORY_URL: https://pypi.python.org/pypi/  # PRODUCTION PYPI
    TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/ # PYPI TEST SERVER

    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"

  matrix:
    - PY_MAJOR_VER: 2
      PYTHON_ARCH: "x86"

    - PY_MAJOR_VER: 2
      PYTHON_ARCH: "x86_64"

    - PY_MAJOR_VER: 3
      PYTHON_ARCH: "x86"

    - PY_MAJOR_VER: 3
      PYTHON_ARCH: "x86_64"

build_script:
  - ps: Start-FileDownload "https://repo.continuum.io/miniconda/Miniconda$env:PY_MAJOR_VER-latest-Windows-$env:PYTHON_ARCH.exe" C:\Miniconda.exe; echo "Finished downloading miniconda"
  - cmd: C:\Miniconda.exe /S /D=C:\Py
  - SET PATH=C:\Py;C:\Py\Scripts;C:\Py\Library\bin;%PATH%
  - conda config --set always_yes yes
  - conda update conda --quiet

  # Things we'll need for build/test
  - ps: conda install numpy scipy cython scikit-learn statsmodels pip nose patsy --quiet

  # Things we'll need for deployment
  - pip install wheel twine

  # Build the package
  - python setup.py develop

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"
  - nosetests --exe -v -A "not slow" pyramid

  # Move back to the project folder
  - "cd .."

after_test:
  # After the test, build the wheels.
  - python setup.py bdist_wheel

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

deploy_script:
  - echo "Starting Artifact Deployment"
  # upload to pypi for windows
  - set PATH=%BK_PATH%
  - twine upload --skip-existing dist/*.whl # To be used for testing with PYPI TEST SERVER
  # - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -And $env:APPVEYOR_REPO_BRANCH -eq "master") { Invoke-Expression "twine upload --skip-existing dist/*.whl" } Else { write-output "Not on a tag on master, won't deploy to pypi" }
