# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# This .yml file is based on scikit-learn and statsmodels' Appveyor CI setups, adapted for
# use with Pyramid https://ci.appveyor.com/project/tgsmith61591/pyramid

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"
  PYPI_USERNAME: tgsmith61591.gh
  PYPI_PASSWORD:
    secure: okvMa3VgIXdlnMC48iMefQ==

  matrix:
    - MAJOR_PYTHON_VERSION: 2
      PYTHON_ARCH: "x86"
      PYTHON_VERSION: "2.7"
      MINICONDA_MICRO_VERSION: "30"
      MPL_VERSION: "2.1.0"
      PYRAMID_MPL_DEBUG: "true"
      CONDA: C:\Miniconda

    - MAJOR_PYTHON_VERSION: 2
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "2.7"
      MINICONDA_MICRO_VERSION: "30"
      MPL_VERSION: "2.1.0"
      PYRAMID_MPL_DEBUG: "true"
      CONDA: C:\Miniconda-x64

    - MAJOR_PYTHON_VERSION: 3
      PYTHON_ARCH: "x86"
      PYTHON_VERSION: "3.5"
      MINICONDA_MICRO_VERSION: "31"
      MPL_VERSION: "2.2.3"
      PYRAMID_MPL_DEBUG: "true"
      CONDA: C:\Miniconda35

    - MAJOR_PYTHON_VERSION: 3
      PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.5"
      MINICONDA_MICRO_VERSION: "31"
      MPL_VERSION: "2.2.3"
      PYRAMID_MPL_DEBUG: "true"
      CONDA: C:\Miniconda35-x64

init:
  - "ECHO %CONDA% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""

  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - ps: |
      If (($env:SKIP_NOTAG -eq "true") -and ($env:APPVEYOR_REPO_TAG -ne "true")) {
          Write-Host "Skipping build, not at a tag."
          Exit-AppveyorBuild
      }

install:
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%CONDA%;%CONDA%\Scripts;%PATH%

  # 3/27/18 - Conda is not working well on Windows because they haven't gotten
  # their act together RE: powershell...
  # 9/24/18 - Use the built-in Miniconda rather than downloading fresh, and use
  # CMD prompt rather than PS
  - "%CMD_IN_ENV% conda config --set always_yes yes"

  # Debugging because Appveyor gives us no stack traces when this stuff breaks.
  - ps: echo "Conda version:"
  - "%CMD_IN_ENV% conda --version"

  # Install conda env
  - "%CMD_IN_ENV% conda create -n testenv --yes python=$env:PYTHON_VERSION numpy scipy cython scikit-learn statsmodels pip nose patsy matplotlib=$env:MPL_VERSION"
  - "%CMD_IN_ENV% activate testenv"

  # Things we'll need for deployment
  - "%CMD_IN_ENV% pip install wheel twine pytest"

build_script:
  # Build the package (and the wheels!)
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"
  - "pip install --pre --no-index --find-links dist/ pyramid"

after_build:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete

  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library
  - mkdir "../empty_folder"
  - "cd ../empty_folder"

  # Test with pytest
  - "pytest --showlocals --durations=20 --pyargs pyramid"
  - "cd ../pyramid"

after_test:
  - set PATH=%BK_PATH%

artifacts:
  - path: dist\*

deploy_script:
  - echo "Starting artifact deployment"
  - set PATH=%BK_PATH%
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --skip-existing dist/*" } Else { write-output "Not on a tagged commit, won't deploy to pypi"}
  #- ps: If ($env:APPVEYOR_REPO_BRANCH -eq "develop") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*" } Else { write-output "Not on a development commit, won't deploy to pypitest"}

cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%APPDATA%\pip\Cache'
